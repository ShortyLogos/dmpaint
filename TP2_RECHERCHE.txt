RECHERCHE TP2
-------------------------------
//// Pipette
-------------------------------

package com.dm.dmpaint;

import androidx.appcompat.app.AppCompatActivity;
import androidx.constraintlayout.widget.ConstraintLayout;

import android.content.Context;
import android.graphics.Bitmap;
import android.graphics.Canvas;
import android.graphics.Color;
import android.graphics.Paint;
import android.graphics.Path;
import android.graphics.Point;
import android.os.Bundle;
import android.os.Trace;
import android.view.MotionEvent;
import android.view.Surface;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ImageView;
import android.widget.LinearLayout;

import java.util.Vector;

public class MainActivity extends AppCompatActivity {

    Surface surface;
    ConstraintLayout surfaceContainer;
    LinearLayout colorsPalette;
    LinearLayout tools;

    Vector<Dessin> image = new Vector<Dessin>();

    Path traceLibre;

    Paint crayonPlein, crayonContour, crayonTest;
    Point depart;
    Point arrivee;

    ImageView cercle;
    ImageView carre;
    ImageView pipette;

    int couleurActive = Color.BLACK;
    String outilActif = "traceLibre";

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);

        surfaceContainer = findViewById(R.id.surfaceContainer);
        colorsPalette = findViewById(R.id.colorsPalette);
        tools = findViewById(R.id.tools);

        pipette = findViewById(R.id.pipette);
        cercle = findViewById(R.id.cercle);
        carre = findViewById(R.id.carre);

        // 1. Mise en place de la surface de dessin
        // 1.1 Création de l'objet Surface
        surface = new Surface(this);

        // 1.2 Taille de l'objet Surface
        surface.setLayoutParams(new ViewGroup.LayoutParams(
                ViewGroup.LayoutParams.MATCH_PARENT,
                ViewGroup.LayoutParams.MATCH_PARENT));

        // 1.3 Ajout de la Surface à son conteneur avec la méthode .addView()
        surfaceContainer.addView(surface);

        // 2. Gestion des évènements
        // 2.1 Création des écouteurs
        EcouteurCouleurs ecCouleurs = new EcouteurCouleurs();
        EcouteurSurface ecSurface = new EcouteurSurface();
        EcouteurOutils ecOutils = new EcouteurOutils();

        // 2.2 Inscriptions des sources aux écouteurs
        surface.setOnTouchListener(ecSurface);
        pipette.setOnClickListener(ecOutils);
        carre.setOnClickListener(ecOutils);

    }

    // 2.3 Définition des classes Écouteurs
    private class EcouteurCouleurs implements View.OnClickListener {

        @Override
        public void onClick(View source) {

        }
    }

    private class EcouteurSurface implements View.OnTouchListener {

        @Override
        public boolean onTouch(View source, MotionEvent motionEvent) {
            if (motionEvent.getAction() == MotionEvent.ACTION_DOWN) {

                if (outilActif.equals("traceLibre")) {
                    traceLibre = new Path();
                    traceLibre.moveTo(motionEvent.getX(), motionEvent.getY());
                    surface.invalidate();
                }

                else if (outilActif.equals("pipette")) {
                    outilActif = "pipette";
                    Bitmap bitmap = surface.getBitmapImage();
                    couleurActive = bitmap.getPixel((int)motionEvent.getX(), (int)motionEvent.getY());
                }

                else if (outilActif.equals("cercle") || outilActif.equals("carre")) {
                    depart = new Point((int)motionEvent.getX(), (int)motionEvent.getY());
                    surface.invalidate();
                }

            }
            else if (motionEvent.getAction() == MotionEvent.ACTION_MOVE) {

                if (outilActif.equals("traceLibre")) {
                    traceLibre.lineTo(motionEvent.getX(), motionEvent.getY());
                    surface.invalidate();
                }

                else if (outilActif.equals("pipette")) {
                    outilActif = "pipette";
                    Bitmap bitmap = surface.getBitmapImage();
                    couleurActive = bitmap.getPixel((int)motionEvent.getX(), (int)motionEvent.getY());
                }

                else if (outilActif.equals("cercle") || outilActif.equals("carre")) {
                    arrivee = new Point((int)motionEvent.getX(), (int)motionEvent.getY());
                    surface.invalidate();
                }


            }
            else if (motionEvent.getAction() == MotionEvent.ACTION_UP) {

                depart = null;
                arrivee = null;

                if (outilActif.equals("traceLibre")) {
                    TraceLibre trait = new TraceLibre("couleur inutile", traceLibre, crayonContour);
                    image.add(trait);
                }

                if (outilActif.equals("pipette")) {
                    outilActif = "traceLibre";
                }

            }

            return true;
        }
    }

    private class EcouteurOutils implements View.OnClickListener {

        @Override
        public void onClick(View source) {

            if (source == pipette) {
                outilActif = "pipette";
            }

            else if (source == carre) {
                outilActif = "carre";
            }

        }
    }

    // Classe interne qui définit la surface de dessin
    private class Surface extends View {

        public Surface(Context context) {
            super(context);


            // Initialisation dans le constructeur des objets Paint avec
            // lesquels on dessinera sur la surface de dessin.
            crayonPlein = new Paint(Paint.ANTI_ALIAS_FLAG);
            crayonContour = new Paint(Paint.ANTI_ALIAS_FLAG);
            crayonContour.setStyle(Paint.Style.STROKE);

            // Pour des tests :
            crayonPlein.setStrokeWidth(30);
            crayonPlein.setColor(Color.BLACK);

            crayonContour.setStrokeWidth(15);
            crayonContour.setColor(Color.BLACK);

            crayonTest = new Paint(Paint.ANTI_ALIAS_FLAG);

            crayonTest.setStrokeWidth(20);
            crayonTest.setColor(Color.MAGENTA);

        }

        // Redéfinition de la méthode onDraw de la classe interne Surface
        @Override
        protected void onDraw(Canvas canvas) {
            super.onDraw(canvas);

            crayonTest.setColor(Color.MAGENTA);
            canvas.drawCircle(100, 100, 80, crayonTest);

            crayonTest.setColor(Color.RED);
            canvas.drawCircle(300, 100, 80, crayonTest);

            crayonTest.setColor(couleurActive);


            // Ici on dessinera
            if (traceLibre != null) {
                canvas.drawPath(traceLibre, crayonTest);
            }

            if (depart != null && arrivee != null) {

                if (outilActif.equals("cercle")) {
                    int deltaX = Math.abs(arrivee.x - depart.x) * Math.abs(arrivee.x - depart.x);
                    int deltaY = Math.abs(arrivee.y - depart.y) * Math.abs(arrivee.y - depart.y);
                    canvas.drawCircle(depart.x, depart.y, arrivee.x, arrivee.y, crayonTest);
                }

                else if (outilActif.equals("carre")) {
                    canvas.drawRect(depart.x, depart.y, arrivee.x, arrivee.y, crayonTest);
                }

            }



            if (image.size() > 0) {
                for (Dessin dessin : image) {
                    dessin.dessiner(canvas);
                }
            }
        }

        public Bitmap getBitmapImage() {

            this.buildDrawingCache();
            Bitmap bitmapImage = Bitmap.createBitmap(this.getDrawingCache());
            this.destroyDrawingCache();

            return bitmapImage;
        }

    }

}






